from fastapi import FastAPI
from contextlib import asynccontextmanager
from fastapi.middleware.cors import CORSMiddleware
from app.routers import auth, assets, failures, machines, maintenance, sensors, tasks, users, workorders
from app.config import settings
import asyncio
import logging
from app.database.data_seed import db_is_empty, init_db
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestor de ciclo de vida de la aplicaci√≥n.
    Se ejecuta al arrancar y detener la aplicaci√≥n.
    """
    # C√≥digo que se ejecuta al iniciar la aplicaci√≥n
    logging.info("üöÄ Iniciando aplicaci√≥n GMAO...")
    
    try:
        # Verificar si la base de datos est√° vac√≠a
        is_empty = db_is_empty()
        
        if is_empty:
            logging.info("üíæ La base de datos est√° vac√≠a. Inicializando...")
            # Inicializar PostgreSQL de forma s√≠ncrona
            init_db()
            logging.info("‚úÖ Base de datos inicializada correctamente")
        else:
            logging.info("‚úÖ Base de datos ya contiene datos. No es necesario inicializar.")
    except Exception as e:
        logging.error(f"‚ùå Error verificando/inicializando la base de datos: {e}")
    
    yield  # Aqu√≠ la aplicaci√≥n est√° en ejecuci√≥n
    
    # C√≥digo que se ejecuta al detener la aplicaci√≥n
    logging.info("üëã Cerrando aplicaci√≥n GMAO...")

# Crear aplicaci√≥n FastAPI con metadatos desde la configuraci√≥n
app = FastAPI(
    title=settings.app_name,
    description=settings.app_description,
    version=settings.app_version,
    debug=settings.debug,
    lifespan=lifespan,
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(auth.router)
app.include_router(assets.router)
app.include_router(failures.router)
app.include_router(machines.router)
app.include_router(maintenance.router)
app.include_router(sensors.router)
app.include_router(tasks.router)
app.include_router(users.router)
app.include_router(workorders.router)
